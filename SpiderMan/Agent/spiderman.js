// Generated by CoffeeScript 1.6.2
var CastTesk, DisplayNowDate, PostData, agentName, fs, nta, serverUrl, system, websocket, _;

system = require("system");

if (system.args.length !== 3) {
  console.log('serverUrl and agentName is necessary!');
  phantom.exit(1);
}

agentName = system.args[1];

serverUrl = system.args[2];

_ = require('./underscore-min');

nta = require('./native2asic');

fs = require('fs');

websocket = require("webpage").create();

websocket.settings.localToRemoteUrlAccessEnabled = true;

websocket.onConsoleMessage = function(info) {
  return console.log("~Websocket_Console: " + info);
};

websocket.onCallback = function(info) {
  switch (info.command) {
    case "CastTesk":
      console.log("~CastTesk: " + JSON.stringify(info.task));
      return CastTesk(info.task);
  }
};

websocket.injectJs('./jquery.1.8.3.min.js');

websocket.injectJs('./jquery.signalR-1.1.1.min.js');

websocket.includeJs(serverUrl + '/signalr/hubs', function() {
  return websocket.evaluate(function(serverUrl, agentName) {
    var taskHub;

    $.support.cors = false;
    $.connection.hub.url = serverUrl + '/signalr';
    taskHub = $.connection.taskHub;
    $.connection.hub.start().done(function() {
      console.log(taskHub.connection.id);
      taskHub.server.joinGroup('agent');
      return taskHub.server.registerAgent(agentName);
    });
    return taskHub.client.castTesk = function(task) {
      var castTesk;

      castTesk = {
        command: "CastTesk",
        task: task
      };
      return window.callPhantom(castTesk);
    };
  }, serverUrl, agentName);
});

CastTesk = function(task) {
  var pageGrab;

  pageGrab = require("webpage").create();
  pageGrab.settings.userAgent = 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36';
  pageGrab.settings.loadImages = false;
  pageGrab.onError = function(msg, trace) {
    var msgStack;

    msgStack = [msg];
    if (trace) {
      trace.forEach(function(t) {
        var _ref;

        return msgStack.push(" -> " + t.file + ": " + t.line + ((_ref = t["function"]) != null ? _ref : " (in function '" + t["function"] + {
          "')": ""
        }));
      });
    }
    return console.log('~EvaluateError: ' + msgStack.join("\n"));
  };
  task.grabdate = DisplayNowDate();
  return pageGrab.open(encodeURI(task.url), function(status) {
    var GrabDone_time, gbdate;

    if (status !== 'success') {
      task.status = 'fail';
      task.error = 'Unable to access page';
      console.log('~Unable to access page');
      PostData(task, {});
    } else {
      pageGrab.injectJs('jquery.1.8.3.min.js');
      pageGrab.injectJs("grabscripts/" + task.site + "_" + task.command + ".js");
      gbdate = pageGrab.evaluate(function() {
        return spGrab();
      });
      GrabDone_time = Date.now() - task.grabdate;
      task.spend = GrabDone_time;
      if (task.encoding === "gbk") {
        if (task.commandtype === 1) {
          _.each(gbdate, function(item, i) {
            return gbdate[i] = nta.obj2asciiobj(item);
          });
        } else {
          gbdate = nta.obj2asciiobj(gbdate);
        }
      }
      PostData(task, gbdate);
    }
    return pageGrab.close();
  });
};

PostData = function(task, data) {
  task = JSON.stringify(task);
  data = JSON.stringify(data);
  console.log("PostData: " + task + " - " + data);
  return websocket.evaluate(function(task, data, serverUrl) {
    var taskHub;

    taskHub = $.connection.taskHub;
    return taskHub.server.postData(task, data);
  }, task, data, serverUrl);
};

DisplayNowDate = function() {
  var dd, hour, minute, mm, seconds, time, yyyy;

  time = new Date();
  yyyy = time.getFullYear();
  mm = time.getMonth() + 1;
  dd = time.getDate();
  hour = time.getHours();
  minute = time.getMinutes();
  seconds = time.getSeconds();
  return yyyy + '-' + mm + '-' + dd + ' ' + hour + ':' + minute + ':' + seconds;
};
